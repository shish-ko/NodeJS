(()=>{var e={738:(e,t,n)=>{const r=n(147),o=n(17),s=n(37),i=n(113),a=n(968).version,c=/(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/gm;function l(e){console.log(`[dotenv@${a}][DEBUG] ${e}`)}function d(e){return e&&e.DOTENV_KEY&&e.DOTENV_KEY.length>0?e.DOTENV_KEY:process.env.DOTENV_KEY&&process.env.DOTENV_KEY.length>0?process.env.DOTENV_KEY:""}function p(e,t){let n;try{n=new URL(t)}catch(e){if("ERR_INVALID_URL"===e.code)throw new Error("INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenv.org/vault/.env.vault?environment=development");throw e}const r=n.password;if(!r)throw new Error("INVALID_DOTENV_KEY: Missing key part");const o=n.searchParams.get("environment");if(!o)throw new Error("INVALID_DOTENV_KEY: Missing environment part");const s=`DOTENV_VAULT_${o.toUpperCase()}`,i=e.parsed[s];if(!i)throw new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${s} in your .env.vault file.`);return{ciphertext:i,key:r}}function u(e){let t=o.resolve(process.cwd(),".env");return e&&e.path&&e.path.length>0&&(t=e.path),t.endsWith(".vault")?t:`${t}.vault`}const f={configDotenv:function(e){let t=o.resolve(process.cwd(),".env"),n="utf8";const i=Boolean(e&&e.debug);var a;e&&(null!=e.path&&(t="~"===(a=e.path)[0]?o.join(s.homedir(),a.slice(1)):a),null!=e.encoding&&(n=e.encoding));try{const o=f.parse(r.readFileSync(t,{encoding:n}));let s=process.env;return e&&null!=e.processEnv&&(s=e.processEnv),f.populate(s,o,e),{parsed:o}}catch(e){return i&&l(`Failed to load ${t} ${e.message}`),{error:e}}},_configVault:function(e){console.log(`[dotenv@${a}][INFO] Loading env from encrypted .env.vault`);const t=f._parseVault(e);let n=process.env;return e&&null!=e.processEnv&&(n=e.processEnv),f.populate(n,t,e),{parsed:t}},_parseVault:function(e){const t=u(e),n=f.configDotenv({path:t});if(!n.parsed)throw new Error(`MISSING_DATA: Cannot parse ${t} for an unknown reason`);const r=d(e).split(","),o=r.length;let s;for(let e=0;e<o;e++)try{const t=p(n,r[e].trim());s=f.decrypt(t.ciphertext,t.key);break}catch(t){if(e+1>=o)throw t}return f.parse(s)},config:function(e){const t=u(e);return 0===d(e).length?f.configDotenv(e):r.existsSync(t)?f._configVault(e):(n=`You set DOTENV_KEY but you are missing a .env.vault file at ${t}. Did you forget to build it?`,console.log(`[dotenv@${a}][WARN] ${n}`),f.configDotenv(e));var n},decrypt:function(e,t){const n=Buffer.from(t.slice(-64),"hex");let r=Buffer.from(e,"base64");const o=r.slice(0,12),s=r.slice(-16);r=r.slice(12,-16);try{const e=i.createDecipheriv("aes-256-gcm",n,o);return e.setAuthTag(s),`${e.update(r)}${e.final()}`}catch(e){const t=e instanceof RangeError,n="Invalid key length"===e.message,r="Unsupported state or unable to authenticate data"===e.message;if(t||n)throw new Error("INVALID_DOTENV_KEY: It must be 64 characters long (or more)");if(r)throw new Error("DECRYPTION_FAILED: Please check your DOTENV_KEY");throw console.error("Error: ",e.code),console.error("Error: ",e.message),e}},parse:function(e){const t={};let n,r=e.toString();for(r=r.replace(/\r\n?/gm,"\n");null!=(n=c.exec(r));){const e=n[1];let r=n[2]||"";r=r.trim();const o=r[0];r=r.replace(/^(['"`])([\s\S]*)\1$/gm,"$2"),'"'===o&&(r=r.replace(/\\n/g,"\n"),r=r.replace(/\\r/g,"\r")),t[e]=r}return t},populate:function(e,t,n={}){const r=Boolean(n&&n.debug),o=Boolean(n&&n.override);if("object"!=typeof t)throw new Error("OBJECT_REQUIRED: Please check the processEnv argument being passed to populate");for(const n of Object.keys(t))Object.prototype.hasOwnProperty.call(e,n)?(!0===o&&(e[n]=t[n]),r&&l(!0===o?`"${n}" is already defined and WAS overwritten`:`"${n}" is already defined and was NOT overwritten`)):e[n]=t[n]}};e.exports.configDotenv=f.configDotenv,e.exports._configVault=f._configVault,e.exports._parseVault=f._parseVault,e.exports.config=f.config,e.exports.decrypt=f.decrypt,e.exports.parse=f.parse,e.exports.populate=f.populate,e.exports=f},113:e=>{"use strict";e.exports=require("crypto")},147:e=>{"use strict";e.exports=require("fs")},37:e=>{"use strict";e.exports=require("os")},17:e=>{"use strict";e.exports=require("path")},968:e=>{"use strict";e.exports=JSON.parse('{"name":"dotenv","version":"16.3.1","description":"Loads environment variables from .env file","main":"lib/main.js","types":"lib/main.d.ts","exports":{".":{"types":"./lib/main.d.ts","require":"./lib/main.js","default":"./lib/main.js"},"./config":"./config.js","./config.js":"./config.js","./lib/env-options":"./lib/env-options.js","./lib/env-options.js":"./lib/env-options.js","./lib/cli-options":"./lib/cli-options.js","./lib/cli-options.js":"./lib/cli-options.js","./package.json":"./package.json"},"scripts":{"dts-check":"tsc --project tests/types/tsconfig.json","lint":"standard","lint-readme":"standard-markdown","pretest":"npm run lint && npm run dts-check","test":"tap tests/*.js --100 -Rspec","prerelease":"npm test","release":"standard-version"},"repository":{"type":"git","url":"git://github.com/motdotla/dotenv.git"},"funding":"https://github.com/motdotla/dotenv?sponsor=1","keywords":["dotenv","env",".env","environment","variables","config","settings"],"readmeFilename":"README.md","license":"BSD-2-Clause","devDependencies":{"@definitelytyped/dtslint":"^0.0.133","@types/node":"^18.11.3","decache":"^4.6.1","sinon":"^14.0.1","standard":"^17.0.0","standard-markdown":"^7.1.0","standard-version":"^9.5.0","tap":"^16.3.0","tar":"^6.1.11","typescript":"^4.8.4"},"engines":{"node":">=12"},"browser":{"fs":false}}')}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var s=t[r]={exports:{}};return e[r](s,s.exports,n),s.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";const e=require("node:http");var t=n.n(e),r=n(738),o=n.n(r);const s=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;var i=n(113),a=n.n(i);const c={randomUUID:a().randomUUID},l=new Uint8Array(256);let d=l.length;function p(){return d>l.length-16&&(a().randomFillSync(l),d=0),l.slice(d,d+=16)}const u=[];for(let e=0;e<256;++e)u.push((e+256).toString(16).slice(1));const f=function(e,t,n){if(c.randomUUID&&!t&&!e)return c.randomUUID();const r=(e=e||{}).random||(e.rng||p)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,t){n=n||0;for(let e=0;e<16;++e)t[n+e]=r[e];return t}return function(e,t=0){return(u[e[t+0]]+u[e[t+1]]+u[e[t+2]]+u[e[t+3]]+"-"+u[e[t+4]]+u[e[t+5]]+"-"+u[e[t+6]]+u[e[t+7]]+"-"+u[e[t+8]]+u[e[t+9]]+"-"+u[e[t+10]]+u[e[t+11]]+u[e[t+12]]+u[e[t+13]]+u[e[t+14]]+u[e[t+15]]).toLowerCase()}(r)};class g extends Array{static checkPayload(e,t=3){if(e&&"string"==typeof e.username&&"number"==typeof e.age&&Array.isArray(e.hobbies)&&!(Object.keys(e).length>t))return!0}static checkUUID(e){return"string"==typeof(t=e)&&s.test(t);var t}add(e){const t=f(),n=Object.assign(Object.assign({},e),{id:t});return this.push(n),n}getUser(e){return this.find((t=>t.id===e))}updateUser(e,t){const n=this.getUser(e);if(g.checkPayload(Object.assign({},n,t),4))return Object.assign(n,t)}deleteUser(e){const t=this.findIndex((t=>t.id===e));this.splice(t,1)}}o().config();const v=process.env.PORT||4e3,h=new g;t().createServer(((e,t)=>{const n=()=>{t.statusCode=404,t.end("This endpoint doesn't exist")},{method:r,url:o}=e,s=null==o?void 0:o.split("/")[3];if(!(null==o?void 0:o.startsWith("/api/users"))||o.split("/").length>4)return n();if(!s&&("PUT"===r||"DELETE"===r))return n();if(s){if(!g.checkUUID(s))return t.statusCode=400,void t.end("Invalid userId");if(!h.getUser(s))return t.statusCode=404,void t.end("User with provided id doesn't exist")}let i,a=[];e.on("data",(e=>a.push(e))).on("end",(()=>{try{switch(a.length&&(i=JSON.parse(Buffer.concat(a).toString())),r){case"GET":t.setHeader("Content-type","application/json"),s?t.end(JSON.stringify(h.getUser(s))):t.end(JSON.stringify(h));break;case"POST":if(!g.checkPayload(i))return t.statusCode=400,t.end("Provide all required info");t.statusCode=201,t.setHeader("Content-type","application/json"),t.end(JSON.stringify(h.add(i)));break;case"DELETE":t.statusCode=204,h.deleteUser(s),t.end();break;case"PUT":const e=h.updateUser(s,i);if(console.log(e),!e)return t.statusCode=400,t.end("Check provided info");t.setHeader("Content-type","application/json"),t.end(JSON.stringify(e))}}catch(e){t.statusCode=500,t.end("Server error. Please, try later")}}))})).listen(v,(()=>console.log(`Server is running at port ${v}`)))})()})();